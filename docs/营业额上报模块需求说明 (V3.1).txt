### **《营业额上报模块需求说明 (V3.1)》**

**更新时间**: 2025-06-22
**状态**: 需求确认 (最终版)

-----

### **一、模块目的**

为蜜雪冰城门店提供营业额上报通道，用于店员按日上报每日收入明细，供总部财务核对，形成误差记录及补缴机制，实现门店收入数据管理。采用MVP思想，简化功能，先实现核心的上报和记录功能。

### **二、使用角色**

*   **店员**: 填写各类收款明细及误差信息，上报营业额，上传相关凭证。支持分阶段录入信息。
*   **分店长**: 与店员功能一致，管理店铺日常运营和数据上报。支持分阶段录入信息。
*   **总店长**: 可查看所有门店销售数据，辅助管理。
*   **财务人员**: 核对上报数据与银行实际到账是否一致（线下比对），记录误差，决定是否需要门店补缴。
*   **管理员**: 可查看全部门店销售数据，辅助管理。

### **三、核心业务逻辑**

**1. 店内人员上报数据**

店员和分店长需要按流程上报每日的营业数据。整个上报过程分为一个**必须首先完成的前置步骤**和两个**并行的后续步骤**。这允许店员根据实际工作情况，在完成第一步后，灵活地安排后续信息的录入顺序。

*   **第一步 (前置步骤): 上报POS机小票信息**

    *   这是开始一天营业额上报的**起点**，必须最先完成。
    *   需填写POS现金收入(C)、电子支付收入(P)、POS外卖收入(D)等信息。
    *   **必须上传清晰的POS机小票照片**作为凭证，方可完成此步骤。
    *   **公式和校验**
        *   `POS机小票总收入(T) = 现金收入(C) + 电子支付收入(P) + POS外卖收入(D)`
        *   在提交第一步（POS机小票信息）时，系统会自动进行服务端校验，若上述公式不成立，将给出明确提示，无法完成该步骤。

*   **后续步骤 (不分先后顺序)**

    *   在完成第一步后，店员可以**按任意顺序**完成以下两个步骤：
    *   **(A) 上报第三方外卖平台收入**
        *   填写第三方外卖收入金额。
        *   **必须上传对应的平台后台截图或账单**作为凭证，方可完成此步骤。
    *   **(B) 上报银行存款信息**
        *   填写银行存入的现金金额及存款手续费。
        *   **必须上传银行存款凭证照片**作为凭证，方可完成此步骤。

*   **凭证类型说明 (文件上传)**

    *   支持图片（jpg, png, gif）和 PDF 文件。
    *   应在前端校验文件类型和大小（最大5MB）。
    *   应支持使用手机相机直接拍照上传。
    *   上传的文件存储路径应包含：用户ID，店铺ID，时间戳等信息。

**2. 最终提交**

*   当所有步骤（第一步、第二步A、第二步B）均完成后，店员需要点击\*\*“提交所有信息”\*\*按钮。
*   此操作会将报告的“最终提交”状态记录为“是”，并将报告锁定，等待财务审核。店员将无法再进行任何修改。

**上报进度清单**

对于每一天的上报记录，系统内部会记录以下几个独立的布尔（Boolean）状态：

*   **`pos_info_completed` (是/否)**
    *   **含义**: 标记第一步是否已成功提交。
    *   **变为“是”的条件**: 店员成功提交了POS机信息及凭证，并通过了系统的公式校验。
*   **`takeaway_info_completed` (是/否)**
    *   **含义**: 标记“上报第三方外卖平台收入”步骤是否已完成。
    *   **变为“是”的条件**: 店员成功提交了外卖平台信息及凭证。
*   **`bank_info_completed` (是/否)**
    *   **含义**: 标记“上报银行存款信息”步骤是否已完成。
    *   **变为“是”的条件**: 店员成功提交了银行存款信息及凭证。
*   **`is_submitted` (是/否)**
    *   **含义**: **此为“最终提交”状态的记录方式。**
    *   **变为“是”的条件**: 在上述三个步骤**全部完成**后，店员点击了最终提交按钮。此操作会将记录锁定，店员无法再修改。

**3. 财务复核**

*   财务人员线下将银行实收数据与门店上报比对。
*   财务人员可根据实际情况，在系统中填写“实际到账金额(bank\_deposit)”，并可标记记录为“需要补交”或“已核对”等状态。
*   系统自动计算：`店铺实际营业额(actual_sales) = 实际到账金额(bank_deposit) + 代金券使用金额(voucher_amount)`。

**财务核对流转 (FinancialCheckStatus)**

*   **状态**: `PENDING` (待核对), `BANK_RECEIVED` (现金存款已到账), `TAKEEAWAY_RECEIVED` (外卖收入已到账), `AMOUNT_VERIFIED` (金额已核实), `REQUIRES_REMEDIATION` (需要补交), `CHECKED` (审核通过)。
*   **流程**: 从店员将`is_submitted`标记为“是”开始，记录的`financial_check_status`将自动变为`PENDING`，然后由财务人员根据核对进度，逐步更新状态，直至最终的`CHECKED`。

**4. 数据归档 (财务操作)**

*   `archived` 字段用于标记营业额上报记录是否已完成所有财务核对工作。归档后，任何人都无法再修改该记录。
*   **触发条件**: 当财务人员将记录的`financial_check_status`标记为最终的`CHECKED`状态后，可以点击“归档”按钮，系统会将`archived`字段设置为`True`（在满足“每日唯一归档记录”约束的前提下）。

**5. 核心业务约束**

*   **每日唯一归档记录**：每个店铺在同一营业日期下，**只允许存在一条最终归档 (`archived` = `True`) 的记录**。系统将在财务人员执行“归档”操作时进行此项唯一性检查，如果该店铺该日已存在归档记录，则本次归档失败并给出提示。

### **四、名词解释**

*   **POS机小票总收入(T)**
    *   POS机打印小票上的总收入，计算公式: 现金收入(C) + 电子支付收入(P) + POS系统中记录的外卖收入(D)，单位：泰铢。
*   **实际到账金额(bank\_deposit)**
    *   财务人员线下根据银行流水等信息，最终确认的到账金额。是银行实际收到的金额，单位：泰铢。
*   **店铺实际营业额(actual\_sales)**
    *   实际到账金额 + 代金券使用金额，单位：泰铢。

### **五、用户角色与权限**

*   **用户角色**: `admin` (管理员), `head_manager` (总店长), `finance` (财务), `branch_manager` (分店长), `employee` (店员)。
*   **权限控制**:
    *   登录时检查用户状态。
    *   根据角色控制数据可见范围（所属店铺或所有店铺）。
    *   `sales/list.html`页面仅管理员/财务可访问。

### **六、状态流转与追踪机制**

**1. 状态流转图**

```mermaid
graph TD
    subgraph 店员操作区
        A(开始) --> B{1. 完成POS信息?};
        B -- 是 --> C{2. 完成外卖信息?};
        B -- 是 --> D{3. 完成银行信息?};
        C -- 是 --> E{全部完成?};
        D -- 是 --> E;
        E -- 是 --> F[点击"最终提交"];
    end

    subgraph 系统自动流转
        F --> G[状态: is_submitted=True];
        G --> H[状态: financial_check_status=PENDING];
    end

    subgraph 财务操作区
        H --> I{进行财务核对...};
        I --> J[状态: CHECKED];
        J --> K[点击"归档"];
    end

    subgraph 最终状态
        K --> L((记录已归档));
    end
```

### **七、技术架构要求**

**1. 后端**

*   编程语言: Python (3.8+)
*   Web框架: Flask (3.1+)
*   ORM: SQLAlchemy (2.0+)
*   数据库: MySQL (5.7+), 使用 Alembic 进行数据库迁移管理。
*   认证与授权: 使用 Flask-Login 进行用户认证和会话管理。使用 Werkzeug security 实现密码哈希存储。
*   文件存储: 支持图片（jpg, png, gif）和PDF文件上传。使用 UUID 作为文件名，避免文件名冲突。文件存储到本地磁盘。文件存储路径: `/uploads/user_id/store_id/report_date/filename.ext`。
*   安全性: 防止 SQL 注入、XSS 攻击、CSRF 攻击，实现密码哈希存储。
*   日志: 使用 Python logging 模块记录系统日志到文件 `/var/log/sales.log`。
*   错误处理: 统一的错误处理机制，记录错误信息，并返回友好的错误提示。

**2. 前端**

*   技术选型: HTML5/CSS3/JavaScript, Bootstrap 5, jQuery。
*   页面要求: 响应式设计，界面简洁，提供清晰的表单验证提示，支持异步提交。
*   文件上传: 前端校验文件类型和大小（最大5MB），提供上传进度条和预览功能。
*   用户交互: 使用Javascript自动计算POS总收入。根据后端传递的状态动态控制页面元素可用性。

**3. 编码规范与测试**

*   遵循 PEP8 编码规范，添加代码注释。
*   编写单元测试和集成测试，进行代码审查。

### **八、前端页面逻辑说明**

**1. 页面结构目录**

*   `app/templates/`
    *   `base.html`: 公共模板（导航栏、基础布局）
    *   `main/index.html`: 首页模板
    *   `sales/report.html`: 营业信息上报页面
    *   `sales/list.html`: 销售核对页面
    *   `user/profile.html`: 用户 profile 页面

**2. 首页 (main/index.html)**

*   根据用户角色展示不同范围的店铺信息（个人或全部）。
*   展示最近一次归档的日营业额和当月累计营业额。

**3. 营业信息上报页面 (sales/report.html)**

*   分阶段录入: 页面分为三个 Tab 页，对应 POS 机小票信息、第三方外卖平台收入信息、银行存款信息。
*   Tab页状态控制: 只有在完成了POS机小票信息的录入和提交后，才允许访问后续的Tab页。
*   数据录入与展示: 自动加载已保存的信息。在POS机小票信息阶段，自动计算总收入T。
*   数据提交: 当所有步骤都完成后，才显示“提交所有信息”按钮。

**4. 销售核对页面 (sales/list.html)**

*   权限控制: 仅管理员/财务可访问。
*   展示内容: 所有门店的上报记录详情，包括各项收入、误差、附件信息、财务核对状态等。
*   财务人员可在此页面进行填写实际到账金额、添加备注、标记状态等操作。

希望这次的输出符合您的要求！如果还有任何问题，请随时告诉我。